1. Command	Definition
git init  --Creates a new Git repository in the current directory.

git add	Moves changes from the working directory to the staging area (or "index"), preparing them for a commit.
git commit --Takes the staged snapshot and permanently records it in the local repository's history, creating a new commit object with a unique SHA-1 hash (often incorrectly cited as SHA-256 in common discourse).
git push	-Uploads local branch commits to the corresponding remote repository.
git fetch	-Downloads commits, files, and refs from a remote repository to your local repository, but does not modify your working files or current local branch.
git pull	-Automatically performs a git fetch followed by a git merge of the fetched changes into your current local branch.
git cherry-pick	Applies the changes introduced by one or more existing commits from any branch onto your current working branch as a new commit.
git stash	-Temporarily saves (or "stashes") changes that you don't want to commit immediately, clearing your working directory and staging area.
git squash	-Often used via git rebase -i (interactive rebase), it combines multiple commits into a single new commit, cleaning up the commit history.
git revert	-Creates a new commit that undoes the changes introduced by a specified commit, preserving the project history.
git reset	-Moves the current branch pointer (HEAD) to a specified commit, potentially modifying the staging area and working directory depending on the mode (--soft, --mixed, --hard). It effectively undoes commits by modifying the commit history.
git log	Shows the committed snapshots history, including commit IDs, authors, dates, and messages.
git reflog	-Records every change made to HEAD (where you were), listing a history of all the operations you've performed on your local repository.
git rebase	-Moves or combines a sequence of commits to a new base commit, creating a linear history by rewriting the project history.

2. git merge diff rebase
Feature	git merge	
History	Preserves history by adding a new "merge commit" that ties the two branches together.

git rebase
Rewrites history by moving your branch's commits to the tip of the base branch, creating a perfectly linear history with new commit IDs.

3.branching strategy
A branching strategy in Git is a set of rules and conventions that a development team uses to manage how they create, name, manage, and merge branches to maintain a stable and organized codebase. 
The goal is to allow multiple developers to work in parallel on new features or bug fixes without interfering with the main, stable code.

3. What is Git?
Git is a free and open-source distributed version control system (DVCS) used to track changes in source code and other files during software development. It allows multiple developers to collaborate on the same project simultaneously without overwriting each other's work and makes it easy to revert to previous versions if issues arise.

How Git Works Conceptually
Git manages a project's history by tracking file contents and changes across three main areas on your local machine:

Working Directory (or Working Tree): This is the actual directory on your computer where you see and edit project files.

Staging Area (or Index): This is an intermediate area where you prepare a set of changes before finalizing them. Using git add, you select which modifications from the Working Directory you want to include in your next commit.

Local Repository (the hidden .git folder): This is the core of Git. It permanently stores all the commits (historical snapshots) of your project.


The Git Workflow
The typical workflow moves changes through these three states:

You modify files in the Working Directory.

You use git add to stage the desired changes to the Staging Area.

You use git commit to take a snapshot of the Staging Area and permanently save it as a new commit in the Local Repository.


4.Key Git Concepts and Terminology
Term	Concept
Repository (Repo)	The entire project folder, including all files and the complete revision history (.git directory).
Commit	A snapshot of your repository at a specific point in time. Each commit has a unique identifier (a SHA-1 hash) and a commit message.
Branch	A lightweight, movable pointer to one of your commits. It represents an independent line of development, allowing you to work on features in isolation without affecting the main codebase.
HEAD	A special pointer that points to the last commit in the current branch you are working on.
Merge	The process of integrating changes from one branch into another branch.
Remote	A version of the repository hosted on the internet or a network, like on GitHub, GitLab, or Bitbucket. This is where teams share changes.
Clone	To create a full, local copy of a remote repository on your computer.
Pull	To download the latest changes from a remote repository and integrate them into your local branch (a combination of git fetch and git merge).
Push	To upload your local, committed changes to a remote repository.




5.Common Git Commands
Command	Action
git init	Initializes a new local Git repository.
git clone [url]	Creates a copy of a remote repository on your local machine.
git status	Shows the state of your Working Directory and Staging Area (which files are modified, staged, or untracked).
git add [file]	Moves a file's changes from the Working Directory to the Staging Area.
git commit -m "[message]"	Records the staged changes as a new commit in the local repository history.
git branch [name]	Creates a new branch.
git checkout [branch]	Switches your current working branch to a different branch (or commit).
git merge [branch]	Integrates the changes from a specified branch into your current branch.
git pull	Fetches and merges changes from the remote repository to your local branch.
git push	Sends your committed changes to the remote repository.